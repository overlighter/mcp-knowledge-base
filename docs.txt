I’m building a knowledgebase and want customers to be able to chat with the files using MCP. I need help testing and setting up the best multimodal RAG-as-a-service option for my setup. My content includes mostly text interview transcripts, some PDF industry reports, and a directory currently in Airtable. I’m looking at services like Ragie.ai, AgentSet.ai, and Airweave.ai, but open to suggestions. As customers use their own LLM (e.g. ChatGPT), they should be able to query my knowledgebase in natural language and receive page-level citations. Example questions: Show me other funds similar to the fund I’m researching Summarize the recent interview with John Fellows How does this Fund II compare to benchmarks for other Fund IIs? Who are allocators investing in climate funds? Side Letter – MCP Knowledge Base MVP Spec Goal: Enable secure, conversational querying and synthesis across The Side Letter knowledge base — including interview transcripts, PDF reports, and structured fund data (currently in Airtable). Users will access the system through MCP (Model Context Protocol) inside ChatGPT or Claude, with access gated to approved users. Example User Prompts These reflect the real-world queries the system should handle: ● Show me other funds similar to the fund I’m researching ● Summarize the recent interview with Roger Luo ● How does this Fund II compare to benchmarks for other Fund IIs? ● Who are allocators investing in climate funds? (from Airtable) ● What companies were mentioned in the Roger Luo briefing? Each answer should cite source documents or records (page-level when possible). Core Requirements 1. Data Sources ○ Text transcripts (Google Drive / PDFs / Docs) ○ PDF reports or memos ○ Structured fund + allocator data (currently in Airtable) 2. Ingestion & Indexing ○ Use a managed RAG service (e.g., Ragie.ai or equivalent) for: ■ Text extraction + chunking ■ Embedding creation and vector storage ■ Page-level citation metadata ○ Lightweight sync service (cron or webhook) keeps Airtable data current. 3. Retrieval & Chat Layer ○ REST endpoint /search (and optional /ask) ■ Authenticated via per-user API key or JWT ■ Accepts query string → returns top k results + citations ○ Endpoint exposed to ChatGPT/Claude via MCP config JSON 4. Authentication & Access ○ Only authorized users (from Clients table or whitelist) can query. ○ Initial version supports manual onboarding; later, automated token issuance. 5. Performance & Quality ○ Sub-2 second retrieval for typical queries. ○ Accurate citation linking to documents or Airtable records. ○ Works for conversational multi-turn context (basic memory OK). Deliverables 1. Operational prototype with: ○ Indexed sample dataset (≈ 10 PDFs + Airtable tables) ○ /search API returning cited snippets ○ MCP JSON enabling ChatGPT integration 2. Brief developer README documenting: ○ Data-flow diagram ○ Field mappings (Airtable → index) ○ Auth / sync / deployment steps Side Letter – MCP Knowledge Base MVP Spec Goal: Enable secure, conversational querying and synthesis across The Side Letter knowledge base — including interview transcripts, PDF reports, and structured fund data (currently in Airtable). Users will access the system through MCP (Model Context Protocol) inside ChatGPT or Claude, with access gated to approved users. Example User Prompts These reflect the real-world queries the system should handle: Show me other funds similar to the fund I’m researching Summarize the recent interview with Roger Luo How does this Fund II compare to benchmarks for other Fund IIs? Who are allocators investing in climate funds? What companies were mentioned in the Roger Luo briefing? Each answer should cite source documents or records (page-level when possible). Core Requirements Data Sources Text transcripts (Google Drive / PDFs / Docs) PDF reports or memos Structured fund + allocator data (currently in Airtable) Ingestion & Indexing Use a managed RAG service (e.g., Ragie.ai or equivalent) for: Text extraction + chunking Embedding creation and vector storage Page-level citation metadata Lightweight sync service (cron or webhook) keeps Airtable data current. Retrieval & Chat Layer REST endpoint /search (and optional /ask) Authenticated via per-user API key or JWT Accepts query string → returns top k results + citations Endpoint exposed to ChatGPT/Claude via MCP config JSON Authentication & Access Only authorized users (from Clients table or whitelist) can query. Initial version supports manual onboarding; later, automated token issuance. Performance & Quality Sub-2 second retrieval for typical queries. Accurate citation linking to documents or Airtable records. Works for conversational multi-turn context (basic memory OK). Deliverables Operational prototype with: Indexed sample dataset (≈ 10 PDFs + Airtable tables) /search API returning cited snippets MCP JSON enabling ChatGPT integration Brief developer README documenting: Data-flow diagram Field mappings (Airtable → index) Auth / sync / deployment steps Sam Huleatt 12:59 AM (12 minutes ago) to me Ragie.ai: sam.huleatt@gmail.com pwd: PtR5j^8bqJq9NvlyH7 Let me know when you need the upgraded version - just note I can't afford multiple connectors, if they are charging us $250 per connector Airtable: sam@thesideletter.co $Jl1Q$&qSCou@NbgQj pls can you go through the client project and tell me what they want to do and step by step how to start the project